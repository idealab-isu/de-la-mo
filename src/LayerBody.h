#ifndef LAYERBODY_H
#define LAYERBODY_H

#include "APIConfig.h"
#include "MBBody.h"
#include "LayerSurface.h"
#include "LayerMold.h"

// Export file is generated by CMake's GenerateExportHeader module
#include "modelbuilder_export.h"


// Defines the structure of the body
class MODELBUILDER_EXPORT LayerBody : public MBBody
{
public:
	unsigned int next_ls_id; /**< Internal counter for LayerSurface numbering */

	/**
	 * \brief Default constructor.
	 */
	LayerBody();

	/**
	 * \brief Copy constructor.
	 * \param rhs object to be copied into
	 */
	LayerBody(const LayerBody& rhs);

	/**
 * \brief Default destructor.
	 */
	~LayerBody();
	
	/**
	 * \brief Copy assignment operator.
	 * \param rhs object to be copied into
	 * \return updated object
	 */
	LayerBody& operator=(const LayerBody& rhs);

	/**
	 * \brief Copies the layer body to lhs.
	 * \param lhs new object
	 */
	void copy(LayerBody& lhs);

	/**
	 * \brief Gets the LayerBody name.
	 * \return name of the LayerBody
	 */
	char* name();

	/**
	 * \brief Sets the LayerBody name.
	 * \param name new name of the LayerBody
	 */
	void name(const char* name);

	/**
	 * \brief Gets the BODY object.
	 * \return body object as defined by the solid modeling kernel
	 */
	DLM_BODYP body();

	/**
	 * \brief Sets the BODY object.
	 * \param body body object as defined by the solid modeling kernel
	 */
	void body(DLM_BODYP body);

	/**
	 * \brief Add a new layer surface to the layer.
	 * \param[in] elem LayerSurface element to be contained in this LayerBody
	 */
	void add_surface(LayerSurface *elem);

	/**
	 * \brief LayerSurface iterator structure.
	 * \return the first iterator object
	 */
	LayerSurface** begin();

	/**
	 * \brief LayerSurface iterator structure.
	 * \return the last iterator object (nullptr)
	 */
	LayerSurface** end();

	/**
	 * \brief Gets the layer surface elements from the layer.
	 * \param idx the array index
	 * \return stored LayerSurface object described by the array index
	 */
	LayerSurface* at(int idx);

	/**
	 * \brief Number of layer surfaces contained in the layer.
	 * \return list of layer surfaces
	 */
	LayerSurface** list();

	/**
	 * \brief Gets the number of layer surfaces contained in the layer.
	 * \return number of LayerSurface elements contained in this layer
	 */
	int size();

	/**
	 * \brief Clear the layer surface elements contained in the layer.
	 */
	void clear();

	/**
	 * \brief Sets the owner of the LayerBody object.
	 * \param[in] owner new owner as a pointer to a Layer object
	 */
	void owner(Layer* owner);

	/**
	 * \brief Gets ownerof the LayerBody object.
	 * \return owner as a pointer to a Layer object
	 */
	Layer* owner();

	/**
	 * \brief Sets mold which generated this LayerBody.
	 * \param[in] new_mold LayerMold object as a pointer
	 */
	void mold(LayerMold* new_mold);

	/**
	 * \brief Sets mold which generated this LayerBody.
	 * \return LayerMold object as a pointer
	 */
	LayerMold* mold();

	/**
	 * \brief Checks whether the input face is contained in this layer body or not.
	 * \param[in] face_query the face object (a solid modeler object) to be queried
	 * \return id of the LayerSurface object (LayerSurface::_mId) contained in this LayerBody
	 */
	int face_id(DLM_FACEP face_query);

protected:

	/**
	 * \brief Error handler
	 */
	void error_handler(int errnum);

private:
	LayerSurface** _pSurfList; /**< List of LayerSurface objects contained in this LayerBody */
	int _mSurfListSize; /**< Size of the LayerSurface objects list */
	Layer* _pOwner; /**< Owner as a pointer to a Layer object */
	LayerMold _mMold; /**< Mold to generate this LayerBody */

	// DLM_BODYP and name defined in base class
	//DLM_BODYP _pBody; /**< BODY object defined by the solid modeling kernel */
	//char* _pName; /**< LayerBody name */

	void init_vars();
	void delete_vars();
	void copy_vars(const LayerBody& rhs, LayerBody& lhs);
};

#endif // !LAYERBODY_H
