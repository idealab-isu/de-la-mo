#ifndef LAYER_H
#define LAYER_H

#include "APIConfig.h"
#include "LayerBody.h"
#include "LayerSurface.h"
#include "LayerMold.h"

// Export file is generated by CMake's GenerateExportHeader module
#include "modelbuilder_export.h"


// Defines a lamina with a single or multiple bodies
class MODELBUILDER_EXPORT Layer
{
public:
	unsigned int next_lb_id; /**< Internal counter for LayerBody numbering */

	/**
	 * \brief Default constructor.
	 */
	Layer();

	/**
	 * \brief Copy constructor.
	 * \param rhs object to be copied into
	 */
	Layer(const Layer& rhs);

	/**
	 * \brief Default destructor. 
	 */
	~Layer();

	/**
	 * \brief Copy assignment operator.
	 * \param rhs object to be copied into 
	 * \return updated object
	 */
	Layer& operator=(const Layer& rhs);

	/**
	 * \brief Copies the layer to lhs.
	 * \param lhs new object
	 */
	void copy(Layer& lhs);

	/**
	 * \brief Returns the value of the layer thickness.
	 * \return layer thickness (always positive)
	 */
	double thickness();

	/**
	 * \brief Gets the value of the position (z) at the original face.
	 * \return orig position
	 */
	double position_orig();

	/**
	 * \brief Gets the value of the position (z) at the offset face.
	 * \return offset position
	 */
	double position_offset();

	/**
	 * \brief Sets the layer position.
	 * 
	 * Instead of setting a constant thickness value, it is better to set two values for orig and offset positions of the layer.
	 * This approach provides flexibility in offsetting operations.
	 * \param pos_at_orig 
	 * \param pos_at_offset 
	 */
	void position(double pos_at_orig, double pos_at_offset);

	/**
	 * \brief Gets the layer name.
	 * \return layer name
	 */
	char* name();

	/**
	 * \brief Sets the layer name.
	 * \param name new layer name
	 */
	void name(const char* name);

	/**
	 * \brief Gets the layer ID.
	 * \return the layer ID
	 */
	int id();

	/**
	 * \brief Sets the layer ID.
	 * \param value the new layer ID
	 */
	void id(int value);

	/**
	 * \brief Gets the the fiber orientation angle, i.e. layup (in degrees).
	 * \return the layup value
	 */
	int layup(); 

	/**
	 * \brief Sets the fiber orientation angle, i.e. layup (in degrees).
	 * \param new_layup new layup value 
	 */
	void layup(int new_layup);

	/**
	 * \brief Sets the layer type, i.e. Lamina or Stiffener.
	 * \param type the layer type
	 */
	void type(LayerType type);

	/**
	 * \brief Gets the layer type.
	 * \return the layer type
	 */
	LayerType type();

	/**
	 * \brief Sets the layer generation direction, i.e. OFFSET or ORIG.
	 * \param ldir the layer generation direction
	 */
	void direction(Direction ldir);

	/**
	 * \brief Gets the layer generation direction.
	 * \return the layer generation direction
	 */
	Direction direction();

	/**
	 * \brief Returns a list of body names contained in a layer.
	 * 
	 * This method initializes the input parameter using "new" but the user is responsible for deleting it from the memory
	 * \param[out] namelist list of layer body names
	 * \param[out] namelist_size size of layer body names list
	 */
	void bodynames(char**& namelistout, int& namelistout_size);

	/**
	 * \brief Updates the layer body names with the layer name as prefix.
	 */
	void update_bodynames();

	/**
	 * \brief Fixes layer body and layer surface owners.
	 */
	void update_owners();

	/**
	 * \brief Adds a new layer body to the layer.
	 * \param elem LayerBody element reference to be contained in this layer
	 */
	void add_body(LayerBody  *elem);

	/**
	 * \brief Returns the list of layer bodies associated with this layer.
	 * \return list of layer bodies
	 */
	LayerBody** list();

	/**
	 * \brief LayerBody iterator structure.
	 * \return the first iterator object
	 */
	LayerBody** begin();

	/**
	 * \brief LayerBody iterator structure.
	 * \return the last iterator object (nullptr)
	 */
	LayerBody** end();

	/**
	 * \brief Gets the layer body elements from the layer.
	 * \param idx the array index
	 * \return stored LayerBody object described by the array index
	 */
	LayerBody* at(int idx);

	/**
	 * \brief Gets the number of layer bodies contained in the layer.
	 * \return number of LayerBody elements contained in this layer
	 */
	int size();

	/**
	 * \brief Clears the layer body list contained in this layer.
	 */
	void clear();

	/**
	 * \brief Removes the layer body at the input index.
	 * \param idx the array index
	 */
	void remove(int idx);

	/**
	 * \brief Prints the contained layer bodies and their indices.
	 * \param extra_info if TRUE, the function prints all details (e.g. points, etc.)
	 */
	void print_bodylist(bool extra_info = false);

	/**
	 * \brief Add a new layer mold to the layer.
	 * \param elem LayerMold element reference to be contained
	 */
	void add_mold(LayerMold *elem);

	/**
	 * \brief Returns the list of molds contained in this layer.
	 * \return list of molds
	 */
	LayerMold** list_mold();

	/**
	 * \brief Gets the number of molds contained in the layer.
	 * \return number of LayerMold elements contained in this layer
	 */
	int size_mold();

	/**
	 * \brief Clears the list of molds contained in this layer.
	 */
	void clear_mold();

	/**
	 * \brief Checks whether the layer is bonded on the input direction.
	 * \param bond_dir input direction
	 */
	bool is_bonded(Direction bond_dir);

	/**
	 * \brief Gets the layer's bond pair on the input direction.
	 * \param bond_dir input direction
	 * \return bonded Layer pair
	 */
	Layer* bond_pair(Direction bond_dir);

	/**
	 * \brief Sets the layer's bond pair on the input direction.
	 * \param[in] bond_dir input direction
	 * \param[in] layer_pair layer pair to be bonded on the input direction
	 */
	void bond_pair(Direction bond_dir, Layer* layer_pair);

	/**
	 * Returns a reference to the initially generated offset mold for generation of delamination profiles
	 *
	 * Restricted to internal use only and should only be called during delamination imprinting step.
	 * \return pointer to the offset LayerMold object
	 */
	LayerMold* delam_profile_ref();

	/**
	 * Returns a reference to the initially generated offset mold for generation of delamination profiles
	 *
	 * Restricted to internal use only and should only be called during initial mold generation step.
	 * \param[in] orig_mold reference to the offset LayerMold object
	 */
	void delam_profile_ref(LayerMold *orig_mold);

private:
	double _mPosOrig; /**< z-value at original direction */
	double _mPosOffset; /**< z-value at offset direction */
	char* _pName; /**< Layer name */
	int _mId; /**< Layer ID */
	int _mLayup; /**< Layer lay-up */
	LayerBody** _pBodyList; /**< List of LayerBody objects */
	int _mBodyListSize; /**< Size of the LayerBody objects list */
	LayerMold** _pMoldList; /**< List of LayerMold objects */
	int _mMoldListSize; /**< Size of the LayerMold objects list */
	LayerType _eType; /**< Type of the generated Layer */
	Direction _eDirection; /**< Direction of generation */
	Layer* _pPairOffset; /**< Points the Layer object on this Layer's offset side */
	Layer* _pPairOrig; /**< Points the Layer object on this Layer's original side */
	LayerMold *_mDelamRefMold; /**< Stores a pointer to of the initially generated LayerMold object for the offset direction */

	void init_vars();
	void delete_vars();
	void copy_vars(const Layer& rhs, Layer& lhs);
};

#endif // !LAYER_H
