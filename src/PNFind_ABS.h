#ifndef PNFIND_ABS_H
#define PNFIND_ABS_H

#include "APIConfig.h"

// Export file is generated by CMake's GenerateExportHeader module
#include "modelbuilder_export.h"


/**
 * Point and normal find algorithms -- Base
 */
class MODELBUILDER_EXPORT PNFind_ABS
{
public:

	// Constructor
	PNFind_ABS() { };

	// Point finding algorithm -- Advanced
	virtual bool find_point(FACE* face_in, SPAtransf& face_transf_in, SPAbox& cohesive_face_bbox, SPAposition& refpoint_in, SPAposition& point_out, bool silence_errors = false) = 0;

	// Point finding algorithm -- Simple
	virtual bool find_point_simple(FACE* face_in, SPAtransf& face_transf_in, SPAposition& refpoint_in, SPAposition& point_out, bool silence_errors = false) = 0;

	// Point finding algorithm -- Only midpoint
	virtual bool find_point_mid(FACE* face_in, SPAtransf& face_transf_in, SPAposition& point_out) = 0;

	void find_normal(FACE* face_in, SPAposition& refpoint_in, SPAunit_vector& normal_out);

	// Find normal at the reference point using ACIS Direct Interface
	void find_normal_direct(FACE* face_in, SPAposition& refpoint_in, SPAunit_vector& normal_out);

	// Find normal by surface evaluation
	void find_normal_surfeval(FACE* face_in, SPAposition& refpoint_in, SPAunit_vector& normal_out);

	// Template method for finding point and normal
	void find_point_normal(FACE* face_in, SPAtransf& face_transf_in, SPAposition& refpoint_in, SPAposition& point_out, SPAunit_vector& normal_out, bool silence_errors = false);

	bool point_in_face(SPAposition& test_point, FACE* test_face, SPAtransf& face_transformation);

protected:

	// Error handler
	void error_handler(outcome& result);

	bool uv_seek(FACE* face_in, SPAtransf& face_transf, SPAposition& refpt_in, SPAposition& refpt_out);
};

#endif //!PNFIND_ABS_H
