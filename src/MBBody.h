#ifndef MBBODY_H
#define MBBODY_H

#include "APIConfig.h"

// Export file is generated by CMake's GenerateExportHeader module
#include "modelbuilder_export.h"

// Defines the structure of the body
class MODELBUILDER_EXPORT MBBody
{
public:
	/**
	 * \brief Default constructor.
	 */
	MBBody();

	/**
	 * \brief Copy constructor.
	 * \param rhs object to be copied into
	 */
	MBBody(const MBBody& rhs);


	// Virtual functions from the LayerBody and the LayerMold class
	/**
	 * \brief Default destructor.
	 */
    virtual ~MBBody();
	
	/**
	 * \brief Copy assignment operator.
	 * \param rhs object to be copied into
	 * \return updated object
	 */
	MBBody& operator=(const MBBody& rhs);

	/**
	 * \brief Copies the layer body to lhs.
	 * \param lhs new object
	 */
	void copy(MBBody& lhs);

	/**
	 * \brief Gets the BODY object.
	 * \return body object as defined by the solid modeling kernel
	 */
	 virtual DLM_BODYP body();

	/**
	 * \brief Sets the BODY object.
	 * \param body body object as defined by the solid modeling kernel
	 */
	virtual void body(DLM_BODYP body);

	/**
	* \brief Gets the LayerBody name.
	* \return name of the LayerBody
	*/
	virtual char* name();

	/**
	* \brief Sets the LayerBody name.
	* \param name new name of the LayerBody
	*/
	virtual void name(const char* name);

protected:
	/**
	 * \brief Error handler
	 */
	void error_handler(int errnum);

	DLM_BODYP _pBody; /**< BODY object defined by the solid modeling kernel */
	char* _pName; /**< MBBody name */

	void init_vars();
	void delete_vars();
	void copy_vars(const MBBody& rhs, MBBody& lhs);
};

#endif // !MBBODY_H
